service: milknthingzz

image: soadaa56/milknthingzz

servers:
  web:
    hosts:
      - 18.190.159.197
    labels:
      traefik.http.routers.maildown-web.rule: 'Host(`milknthingzz.xyz`)'
      traefik.http.routers.maildown-web.entrypoints: websecure
      traefik.http.routers.maildown-web.tls.certresolver: letsencrypt
    accessories:
      db:
        image: postgres:latest
        host: 18.190.159.197
        port: 5432
        env:
          clear:
            POSTGRES_DB: soadaa_production
            POSTGRES_USER: soadaa
          secret:
            - POSTGRES_PASSWORD
        volumes:
          - "postgres-data:/var/lib/postgresql/data"

ssh:
  user: ubuntu

registry:
  username: soadaa56
  password:
    - KAMAL_REGISTRY_PASSWORD

aws:
  region: us-east-2
  access_key_id: 
    - AWS_ACCESS_KEY_ID
  secret_access_key: 
    - AWS_SECRET_ACCESS_KEY

traefik:
  publish: true
  options:
    publish:
      - 443:443
    volume:
      - "letsencrypt:/letsencrypt"
  args:
    entrypoints.web.address: ':80'
    entrypoints.websecure.address: ':443'
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
    certificatesResolvers.letsencrypt.acme.email: soadhlh@gmail.com
    certificatesResolvers.letsencrypt.acme.storage: /letsencrypt/acme.json

volumes:
  - "storage:/rails/storage"

healthcheck:
  path: /healthz
  port: 3000
  max_attempts: 7
  interval: 30s

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
    # Add any additional environment variables here
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD

asset_path: /rails/public/assets

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
